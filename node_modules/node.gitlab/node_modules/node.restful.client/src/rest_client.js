var http = require('http'),
    https = require('https'),
    util = require('util'),
    nodeUrl = require('url'),
    nodeQs = require('querystring');

var helper = {
    parseUrlAndData: function(url, data) {
        var temp = null;

        if (typeof data === 'string' && data.indexOf('=') !== -1) {
            data = nodeQs.parse(data);
        } else if (({}).toString.call(data) !== '[object Object]') {
            temp = data;
            data = null;
        }
        url = url.replace(/\(?\/[^\:\(\)]*\:(\w+)[^\:\(\)]*\)?/g, function(matcher, key) {
            var ret = data,
                optional = false;

            matcher = matcher.replace(/\(([^\(\)]+)\)/, function() {
                optional = true;
                return arguments[1];
            });

            if (data === null && temp !== null && typeof temp !== 'undefined') {
                data = {};
                data[key] = temp;
            }
            if (data) {
                ret = data[key];
            }

            if (ret === null || ret === undefined) {
                if (!optional) {
                    throw new Error('Parameter "' + key + '" is required.');
                }
                ret = '';
            }

            return ret ? matcher.replace(/\:\w+/, ret) : '';
        });

        return [url, data];
    },
    deepRegister: function(target, obj) {
        for (var k in obj) {
            if (obj.hasOwnProperty(k) && k !== '$path') {
                helper.deepRegister(target.register(obj[k].$path, k), obj[k]);
            }
        }
    }
};

var RestClient = function(config) {
    config = config || {};
    this.config = config;
    this.api = config.api;
    this.dataType = config.dataType || 'json';
    this.beforeRequest = config.beforeRequest || null;
    this.afterRequest = config.afterRequest || null;
    this.isRoot = true;
};

RestClient.prototype.register = function(path, name) {
    var $path = {},
        item;

    if (typeof path === 'string') {
        $path['DEFAULT'] = path;
    } else {
        $path = path;
    }
    if (!name) {
        // TODO 
    }
    if (!!this.constructor.prototype[name]) {
        throw Error('resource "' + name + '" is reserved word, please use another name');
    }
    if (this[name]) {
        this[name].$path = this[name].$path || {};
        for (var key in $path) {
            if ($path.hasOwnProperty(key)) {
                item = this[name].$path[key];
                if (typeof item === 'string' && item !== $path[key]) {
                    throw Error('resource ' + name + ':' + key + ' has been registered');
                } else {
                    this[name].$path[key] = $path[key];
                }
            }
        }
    } else {
        this[name] = new Resource(this.client || this);
        this[name].$path = $path;
    }

    return this[name];
};

RestClient.prototype.registerAll = function(apiObj) {
    helper.deepRegister(this, apiObj);
    return this;
};

RestClient.prototype.request = function(options, callback) {
    var _self = this,
        req,
        httplib,
        matcher,
        params,
        url,
        urlAndData,
        auth,
        beforeRequest,
        body,
        isReadAction,
        length;

    urlAndData = helper.parseUrlAndData(options.url || '', options.data);
    url = urlAndData[0];
    options.data = urlAndData[1];
    url = nodeUrl.parse(url);
    matcher = url.protocol.match(/^http[s]?/i);
    params = {
        host: url.hostname || url.host || 'localhost',
        port: url.port || 80,
        path: url.path || '/',
        method: options.method || 'GET',
        headers: options.headers || {},
        data: options.content || options.data
    };

    auth = options.auth || url.auth;
    if (auth) {
        options.auth = auth;
    }

    if (matcher && matcher[0] === 'http') {
        httplib = http;
    } else if (matcher && matcher[0] === 'https') {
        params.port = url.port || 443;
        httplib = https;
    } else {
        throw new Error('Protocol ' + url.protocol + ' is not supported');
    }

    if ((options.dataType || this.dataType) === 'json') {
        params.headers.Accept = 'application/json';
    }

    beforeRequest = options.beforeRequest || this.config.beforeRequest;
    if (typeof beforeRequest === 'function') {
        params = beforeRequest(params) || params;
    }

    body = params.data;
    isReadAction = (params.method === 'GET' || params.method === 'HEAD');
    if (body && !(typeof body === 'string' || Buffer.isBuffer(body))) {
        if (isReadAction) {
            body = nodeQs.stringify(body);
            params.path += (url.query ? '&' : '?') + body;
            body = null;
        } else {
            params.headers['Content-Type'] = params.headers['Content-Type'] || params.headers['content-type'] || 'application/json';
            body = JSON.stringify(body);
        }
    }

    if (body) {
        length = body.length;
        if (!Buffer.isBuffer(body)) {
            length = Buffer.byteLength(body);
        }
        params.headers['Content-Length'] = length;
    }

    delete params.data;

    req = httplib.request(params, function(res) {
        var data = '';
        res.setEncoding('utf8');
        res.on('data', function(chunk) {
            data += chunk;
        });

        res.on('end', function() {
            var afterRequest = options.afterRequest || _self.config.afterRequest,
                args = [data, res];
            if (typeof afterRequest === 'function') {
                args = afterRequest(data, res) || [data, res];
            }
            if (typeof callback === 'function') {
                callback.apply(_self, args);
            }
        });
    });
    req.on('error', function(e) {
        console.log('problem with request: ' + e.message);
    });
    if (body) {
        req.write(body);
    }
    req.end();

    return req;
};

var Resource = function(client) {
    this.client = client;
};

Resource.prototype.register = function(path, name) {
    return this.client.register.call(this, path, name);
};

Resource.prototype.read = Resource.prototype.get = function(data, callback) {
    return this._request('GET', data, callback);
};

Resource.prototype.update = Resource.prototype.put = function(data, callback) {
    return this._request('PUT', data, callback);
};

Resource.prototype.create = Resource.prototype.post = function(data, callback) {
    return this._request('POST', data, callback);
};

Resource.prototype.remove = Resource.prototype.del = function(data, callback) {
    return this._request('DELETE', data, callback);
};

Resource.prototype._request = function(method, data, callback) {
    var resourcePath = this.$path && (this.$path[method] || this.$path['DEFAULT']);

    if (typeof data === 'function') {
        callback = data;
        data = null;
    }

    if (resourcePath) {
        this.client.request({
            url: this.client.api.replace(/\/+$/, '') + resourcePath,
            data: data || null,
            method: method || 'GET'
        }, callback);
    } else {
        throw new Error('API has no support method:' + method);
    }
    return this;
};

module.exports = RestClient;